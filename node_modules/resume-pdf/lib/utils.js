"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TwoDigits = exports.AddEducation = exports.AddExperience = exports.AddTopSkills = exports.AddSummary = exports.AddHeader = void 0;
// ResumePDF Helper Functions
function AddHeader(file, docConfig, config) {
    var name = config.name, phone = config.phone, email = config.email;
    SetSectionCurrentY(file, docConfig, name);
    var _a = docConfig.margins, top = _a.top, right = _a.right, width = docConfig.pageSize.width;
    var lineHeight = file.getLineHeight() / 72;
    var yDelta = lineHeight; // use 1 lineHeight because it's only added once in text adds below
    ParseForBold(file, "Phone: **" + phone + "**", width - right, top, { align: 'right' });
    ParseForBold(file, "Email: **" + email + "**", width - right, top + lineHeight, { align: 'right' });
    EndSectionWithLine(file, docConfig, yDelta);
}
exports.AddHeader = AddHeader;
function AddSummary(file, docConfig, config) {
    SetSectionCurrentY(file, docConfig, 'Summary');
    var _a = docConfig.margins, left = _a.left, right = _a.right, width = docConfig.pageSize.width, currentY = docConfig.currentY;
    var description = config.description;
    var summary = file.splitTextToSize(description, width - left - right + 0.5);
    var lineHeight = file.getLineHeight() / 72;
    var yLocal = currentY;
    var yDelta = 0;
    summary.map(function (x, i) {
        yDelta = lineHeight * i;
        ParseForBold(file, x, left, yLocal + yDelta);
    });
    EndSectionWithLine(file, docConfig, yDelta);
}
exports.AddSummary = AddSummary;
function AddTopSkills(file, docConfig, config) {
    SetSectionCurrentY(file, docConfig, 'Top Skills');
    var left = docConfig.margins.left, width = docConfig.pageSize.width, currentY = docConfig.currentY, fontConfig = docConfig.fontConfig;
    var skills = config.skills;
    var yLocal = currentY;
    var lineHeight = file.getLineHeight() / 72;
    var yDelta = lineHeight * 2; // Multiply by 2 because table rows are 2
    // Add 6 Skills
    var cellWidth = width / 3 - 0.3;
    var leftTableStart = left + 0.1;
    var textConfig = {
        align: 'left',
        lineHeightFactor: 1.9,
    };
    SetFont(file, fontConfig, 'top_skills_table');
    file.text([skills[0], skills[3]], leftTableStart, yLocal, textConfig);
    file.text([skills[1], skills[4]], leftTableStart + cellWidth, yLocal, textConfig);
    file.text([skills[2], skills[5]], leftTableStart + cellWidth * 2, yLocal, textConfig);
    SetFont(file, fontConfig);
    EndSectionWithLine(file, docConfig, yDelta);
}
exports.AddTopSkills = AddTopSkills;
function AddExperience(file, docConfig, config) {
    SetSectionCurrentY(file, docConfig, 'Experience');
    var _a = docConfig.margins, left = _a.left, right = _a.right, width = docConfig.pageSize.width, currentY = docConfig.currentY;
    var lineHeight = file.getLineHeight() / 72;
    var yLocal = currentY;
    config.exp.forEach(AddJob);
    function AddJob(data) {
        var y = yLocal;
        var company = data.company, position = data.position, year_start = data.year_start, year_end = data.year_end, bullets = data.bullets;
        var lineOne = " : \t **" + position + "**";
        var timeThere = "[ " + year_start + " - " + year_end + " ]";
        file.setFont('helvetica', 'italic');
        file.text(company, left, y);
        var companyInchWidth = (file.getStringUnitWidth(company) * file.getFontSize()) / 72;
        ParseForBold(file, lineOne, left + companyInchWidth, y);
        file.text(timeThere, width - right, y, { align: 'right' });
        var bulletsWithPoints = bullets.map(function (x) {
            return '    \u0090  ' + x;
        });
        var bulletsToSize = [''];
        bulletsWithPoints.forEach(function (x) {
            var split = file.splitTextToSize(x, width - left - right).map(function (line, i) {
                if (i > 0) {
                    return '       ' + line;
                }
                else {
                    return line;
                }
            });
            bulletsToSize = bulletsToSize.concat(split);
        });
        file.text(bulletsToSize, left, y + 0.05);
        var numOfLines = 1 + bulletsToSize.length; // Need to add 1 so there is a space between each job
        yLocal = yLocal + numOfLines * lineHeight;
    }
    var yDelta = yLocal - currentY - lineHeight; // Subtract 1 lineHeight for the end of the section
    EndSectionWithLine(file, docConfig, yDelta);
}
exports.AddExperience = AddExperience;
function AddEducation(file, docConfig, config) {
    SetSectionCurrentY(file, docConfig, 'Education');
    var _a = docConfig.margins, left = _a.left, right = _a.right, width = docConfig.pageSize.width, currentY = docConfig.currentY;
    var school = config.school, degree = config.degree, gpa = config.gpa, grad_year = config.grad_year;
    var yLocal = currentY;
    var lineHeight = file.getLineHeight() / 72;
    var yDelta = lineHeight * 3; // Multiply by 3 because 3 lines are taken with school, degree and gpa
    file.text([school, degree, gpa], left, yLocal);
    file.text("[ " + grad_year + " ]", width - right, yLocal, { align: 'right' });
    EndSectionWithLine(file, docConfig, yDelta);
}
exports.AddEducation = AddEducation;
// Internal Helper Functions
function ParseForBold(file, text, x, y, options) {
    var startX = x;
    var fontSize = file.getFontSize();
    var parseForBold = text.split('**');
    if (options && options.align === 'right') {
        parseForBold = parseForBold.reverse();
    }
    parseForBold.map(function (content, i) {
        file.setFont('helvetica', 'bold');
        // every even item is a normal font weight item
        if (i % 2 === 0) {
            file.setFont('helvetica', 'normal');
        }
        file.text(content, startX, y, options);
        if (options && options.align === 'right') {
            startX = startX - (file.getStringUnitWidth(content) * fontSize) / 72;
        }
        else {
            startX = startX + (file.getStringUnitWidth(content) * fontSize) / 72;
        }
    });
}
function TwoDigits(value) {
    return Math.round(value * 100) / 100;
}
exports.TwoDigits = TwoDigits;
function AddSectionTitle(file, title, x, y, fontConfig) {
    SetFont(file, fontConfig, 'section_title');
    file.text(title.toUpperCase(), x, y);
    SetFont(file, fontConfig);
}
function EndSectionWithLine(file, docConfig, y) {
    var _a = docConfig.margins, left = _a.left, right = _a.right, top = _a.top, width = docConfig.pageSize.width, currentY = docConfig.currentY, sectionTextSpacing = docConfig.sectionTextSpacing, sectionEndSpacing = docConfig.sectionEndSpacing;
    var yLocal = currentY === top + sectionTextSpacing ? currentY + y : currentY + y + sectionEndSpacing;
    file.lines([[width - left - right, 0]], left, yLocal, [1, 1]);
    // Update the currentY in config after adding line
    docConfig.currentY = yLocal;
}
function SetSectionCurrentY(file, config, sectionTitle) {
    var currentY = config.currentY, sectionTitleSpacing = config.sectionTitleSpacing, sectionTextSpacing = config.sectionTextSpacing, _a = config.margins, top = _a.top, left = _a.left, fontConfig = config.fontConfig;
    var yLocal = currentY ? currentY : top;
    yLocal = TwoDigits(yLocal);
    if (currentY)
        yLocal = yLocal + sectionTitleSpacing;
    AddSectionTitle(file, sectionTitle, left, yLocal, fontConfig);
    yLocal = yLocal + sectionTextSpacing;
    config.currentY = TwoDigits(yLocal);
}
function SetFont(file, fontConfig, type) {
    var titleSize = fontConfig.titleSize, textSize = fontConfig.textSize;
    switch (type) {
        case 'section_title': {
            file.setFont('helvetica', 'bold');
            file.setFontSize(titleSize);
            break;
        }
        case 'top_skills_table': {
            file.setFont('helvetica', 'bold');
            file.setFontSize(textSize);
            break;
        }
        default: {
            file.setFont('helvetica', 'normal');
            file.setFontSize(textSize);
        }
    }
}
